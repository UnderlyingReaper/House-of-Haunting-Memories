//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Dev Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DevControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DevControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Dev Controls"",
    ""maps"": [
        {
            ""name"": ""Dev Tools"",
            ""id"": ""a522d827-fe46-41c6-917b-ea805cf0f974"",
            ""actions"": [
                {
                    ""name"": ""Key Sequence"",
                    ""type"": ""Button"",
                    ""id"": ""d7a522c5-fff9-43e2-a57d-4a8d6e48a31c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0d8f5a6c-9808-4c7c-a6c7-b226bfac1f95"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Key Sequence"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1aa7878-736f-4b94-8e68-843557e461a7"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Key Sequence"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3dc61e9b-2a39-4d44-83f3-477961a0c25c"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Key Sequence"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c65139a-a574-4e14-a221-f863adc5855a"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Key Sequence"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e92b771e-a5d1-4b0c-a231-f8aada6303a2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Key Sequence"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Dev Tools
        m_DevTools = asset.FindActionMap("Dev Tools", throwIfNotFound: true);
        m_DevTools_KeySequence = m_DevTools.FindAction("Key Sequence", throwIfNotFound: true);
    }

    ~@DevControls()
    {
        UnityEngine.Debug.Assert(!m_DevTools.enabled, "This will cause a leak and performance issues, DevControls.DevTools.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Dev Tools
    private readonly InputActionMap m_DevTools;
    private List<IDevToolsActions> m_DevToolsActionsCallbackInterfaces = new List<IDevToolsActions>();
    private readonly InputAction m_DevTools_KeySequence;
    public struct DevToolsActions
    {
        private @DevControls m_Wrapper;
        public DevToolsActions(@DevControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @KeySequence => m_Wrapper.m_DevTools_KeySequence;
        public InputActionMap Get() { return m_Wrapper.m_DevTools; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DevToolsActions set) { return set.Get(); }
        public void AddCallbacks(IDevToolsActions instance)
        {
            if (instance == null || m_Wrapper.m_DevToolsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DevToolsActionsCallbackInterfaces.Add(instance);
            @KeySequence.started += instance.OnKeySequence;
            @KeySequence.performed += instance.OnKeySequence;
            @KeySequence.canceled += instance.OnKeySequence;
        }

        private void UnregisterCallbacks(IDevToolsActions instance)
        {
            @KeySequence.started -= instance.OnKeySequence;
            @KeySequence.performed -= instance.OnKeySequence;
            @KeySequence.canceled -= instance.OnKeySequence;
        }

        public void RemoveCallbacks(IDevToolsActions instance)
        {
            if (m_Wrapper.m_DevToolsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDevToolsActions instance)
        {
            foreach (var item in m_Wrapper.m_DevToolsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DevToolsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DevToolsActions @DevTools => new DevToolsActions(this);
    public interface IDevToolsActions
    {
        void OnKeySequence(InputAction.CallbackContext context);
    }
}
